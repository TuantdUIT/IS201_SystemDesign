/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotelmanagement.add;

import hotelmanagement.dashboard_main.DashboardStaff;
import hotelmanagement.entity.Customer;
import hotelmanagement.entity.dba_connection;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import java.util.*;
import hotelmanagement.entity.Service;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dell
 */
// Class service type and name in order to colour column done.
class Double{
    String type;
    String name;

    public Double() {
    }

    public Double(String type, String name) {
        this.type = type;
        this.name = name;
    }
    
}

public class CTHD_Form extends javax.swing.JFrame {
    public DefaultTableModel model = new DefaultTableModel();
    /**
     * Creates new form CTHD_Form
     */
    private DashboardStaff parent;
    public int count_details; //Số lượng hiển thị trong CTHD form
    public String Amount; //Số lượng khách yêu cầu
    private String makh;
    public CTHD_Form() {
        initComponents();
    }
    
    public CTHD_Form(DashboardStaff parent, String makh, String ngaybd, String ngaykt, String serviceName, String Amount){
        initComponents();
        autoReloadCTHD(makh, ngaybd, ngaykt, serviceName, Amount);
        this.makh = makh;
//        autoReloadComboBox_Service();
        this.count_details = 0;
        this.Amount=Amount;
        this.parent = parent;
    }
    
    public void autoReloadCTHD(String makh, String ngaybd, String ngaykt, String serviceName, String Amount){
        dba_connection connect = new dba_connection();
        //chọn hoá đơn có tt!=Đã thanh toán và mới nhất
        String sql = "select mahd from hoadon where makh = '" + makh + "' and TINHTRANGTHANHTOAN != 'Đã thanh toán' ORDER BY NGAYTAO DESC";
        
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        try {
            java.util.Date bd = inputFormat.parse(ngaybd);
            java.util.Date kt = inputFormat.parse(ngaykt);
            
            SimpleDateFormat outputFormat = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH);
            String out_bd = outputFormat.format(bd);
            String out_kt = outputFormat.format(kt);
            
            this.Amount=Amount;
            txtServiceName.setText(serviceName.trim());
            dpStarted.setText(out_bd);
            dpEnded.setText(out_kt);
            if(Customer.type_customer_request.equalsIgnoreCase("R")){
                txtServicetype.setText("Room");
                txtServicetype.setEnabled(false);
            }else if(Customer.type_customer_request.equalsIgnoreCase("S")){
                txtServicetype.setText("Service");
                txtServicetype.setEnabled(false);
            }
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            if(rs.next()){
                txtInvoiceID.setText(rs.getString("mahd"));
                txtInvoiceID.setEnabled(false);
            }
        } catch (ClassNotFoundException | SQLException  ex) {
            Logger.getLogger(CTHD_Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(CTHD_Form.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtInvoiceID = new javax.swing.JTextField();
        txtServiceID = new javax.swing.JTextField();
        txtServicetype = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        dpStarted = new com.github.lgooddatepicker.components.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dpEnded = new com.github.lgooddatepicker.components.DatePicker();
        tbl_dvphong = new javax.swing.JScrollPane();
        tabAvailableService = new javax.swing.JTable();
        btnSearchService = new javax.swing.JButton();
        lblServiceName = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtServiceName = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lblCount = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 255));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Add a Invoice Detail");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N

        jLabel2.setText("Invoice ID");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setText("Service ID");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtInvoiceID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInvoiceIDActionPerformed(evt);
            }
        });

        jLabel3.setText("Service type");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtInvoiceID)
                    .addComponent(txtServiceID, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(txtServicetype, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtInvoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtServiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtServicetype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        btnAdd.setText("Add");
        btnAdd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Day Started");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel6.setText("Day Ended");
        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        tabAvailableService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Service ID", "Service Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_dvphong.setViewportView(tabAvailableService);

        btnSearchService.setText("Search");
        btnSearchService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchServiceActionPerformed(evt);
            }
        });

        lblServiceName.setText("Service name:");
        lblServiceName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel8.setText("Available Service:");
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtServiceName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServiceNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tbl_dvphong)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(lblServiceName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dpStarted, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(txtServiceName))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchService)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dpEnded, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchService)
                    .addComponent(lblServiceName)
                    .addComponent(txtServiceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dpStarted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(dpEnded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbl_dvphong, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("Recent amount of created details:");
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        lblCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCount.setText("0");
        lblCount.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblCount.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnBack.setText("Back");
        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64)
                        .addComponent(btnBack)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        //Nếu lỡ back ra trong lúc đang tạo thì dòng được chọn đó sẽ hiện màu đỏ và amount bằng số lượng phòng yêu cầu còn lại
        int cnt = Integer.parseInt(Amount);
//        count_details -= cnt;
        String type = txtServicetype.getText().equals("Room")?"R":"S";
        String name = txtServiceName.getText();
        
        Double d = new Double(type, name);
        if(type.equals("S"))this.dispose();
//        String sql = "";
//        dba_connection connect = new dba_connection();
//        if(type.equalsIgnoreCase("Roonm")){
//            sql = "update phieudat "
//                    + "set slsd = ? "
//                    + "where trim(makh) = trim(?) "
//                    + "and trim(type_of_service) = trim(?) "
//                    + "and trim(name_of_service) = trim(?)";
//        }
//        try {
//            Class.forName(connect.driver);
//            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
//            PreparedStatement pst = con.prepareStatement(sql);
//            pst.setInt(1, count_details);
//            pst.setString(2, type);
//            pst.setString(3, name);
//            pst.executeUpdate();
//            
//            
//            
//        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(CTHD_Form.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        if(cnt > count_details){
            int yes = JOptionPane.showConfirmDialog(this, "The required number of rooms has not been fully booked. Are you want to exit?", "Exit",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(yes == JOptionPane.YES_OPTION){                
//                JTable table = parent.getTabRequest();
//
//                table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
//                    @Override
//                    public Component getTableCellRendererComponent(JTable table, Object value,
//                            boolean isSelected, boolean hasFocus, int row, int column) {
//
//                        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//
//                        DefaultTableModel model = (DefaultTableModel) table.getModel();
//                        String t = model.getValueAt(row, 2).toString();
//                        String n = model.getValueAt(row, 3).toString();
//
//                        if (d.type.trim().equalsIgnoreCase(t.trim()) && d.name.trim().equalsIgnoreCase(n.trim())) {
//                            c.setBackground(Color.red); // light green
//                        }
//
//                        return c;
//                    }
//                });    
//                table.repaint();

                // Delay dispose để GUI kịp update
                new javax.swing.Timer(100, e -> this.dispose()).start();                
            }
        }else{
            JTable table = parent.getTabRequest();

            table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value,
                        boolean isSelected, boolean hasFocus, int row, int column) {

                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    String t = model.getValueAt(row, 2).toString();
                    String n = model.getValueAt(row, 3).toString();

                    if (d.type.trim().equalsIgnoreCase(t.trim()) && d.name.trim().equalsIgnoreCase(n.trim())) {
                        c.setBackground(new Color(144, 238, 144)); // light green
                    }else{
                        c.setBackground(Color.WHITE);
                    } 
                    return c;
                }
            });

            table.repaint();

            // Delay dispose để GUI kịp update
            new javax.swing.Timer(100, e -> this.dispose()).start();
        }
        
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void add_details()
    {
        return;
    }
    
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(count_details).equalsIgnoreCase(this.Amount))
        {
            int yes = JOptionPane.showConfirmDialog(this, "You have created enough details, do you want to continue creating more?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(yes == JOptionPane.YES_OPTION){
                add_details();
                //DEM SO CTHD DA ADD  
                this.count_details++;
                lblCount.setText(String.valueOf(count_details));
            }
        }
        else {
            add_details();
            //DEM SO CTHD DA ADD  
            this.count_details++;
            lblCount.setText(String.valueOf(count_details));
        }
        
        dba_connection connect = new dba_connection();
        SimpleDateFormat inputFormat = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH);
        String sql = "INSERT INTO cthd(mahd, loaidv, madv, ngaybd, ngaykt) VALUES (?, ?, ?, ?, ?)";
        String sql_delete = "delete from cthd where trim(makh) = trim(?)";
        //Chèn dữ liệu 
        String mahd = txtInvoiceID.getText();
        String madv = txtServiceID.getText();
        String type = txtServicetype.getText();
        String loaidv = type.equalsIgnoreCase("Room")? "DVP" : "DVTI";
//        System.out.println(type);

        try {
            java.util.Date bd = inputFormat.parse(dpStarted.getText());
            java.util.Date kt = inputFormat.parse(dpEnded.getText());
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            java.sql.Date ngaybd = new java.sql.Date(bd.getTime());
            java.sql.Date ngaykt = new java.sql.Date(kt.getTime());
            
            
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            PreparedStatement pst = con.prepareStatement(sql);
            
            pst.setString(1, mahd);
            pst.setString(2, loaidv);
            pst.setString(3, madv);
            pst.setDate(4, ngaybd);
            pst.setDate(5, ngaykt);
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Add successfully");
//            this.dispose();
    
            

        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(CTHD_Form.class.getName()).log(Level.SEVERE, null, ex);
        }              
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtInvoiceIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInvoiceIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInvoiceIDActionPerformed
    private void SearchR()
    {  
        ArrayList<Service> list_service = new ArrayList<>();
        String ngaybd = dpStarted.getText();
        String ngaykt = dpEnded.getText();
        if(dpStarted.getDate().compareTo(dpEnded.getDate())>=0) {
            JOptionPane.showMessageDialog(this, "The start date must before the end date!");
        }else{
            String sql = "select * from dvphong p"
                    + " where trim(p.loaiphong) = trim(?)"
                    + " and not exists("
                    + " select 1 from cthd c"
                    + " where c.madv = p.madvp"
                    + " and not(c.ngaykt < TO_DATE(?, 'Month DD YYYY', 'NLS_DATE_LANGUAGE = English') or"
                    + " c.ngaybd > TO_DATE(?, 'Month DD YYYY', 'NLS_DATE_LANGUAGE = English')))";
            dba_connection connect = new dba_connection();
            try {
                Class.forName(connect.driver);
                Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
                PreparedStatement pst = con.prepareStatement(sql);            

                pst.setString(1, txtServiceName.getText());
                pst.setString(2, ngaybd);
                pst.setString(3, ngaykt);
                ResultSet rs = pst.executeQuery();
                list_service.clear();

                while(rs.next()){
                    Service s = new Service();
                    s.setMaDV(rs.getString("MADVP"));
                    s.setTenDV(rs.getString("LOAIPHONG"));
                    list_service.add(s);
                }

                model =  (DefaultTableModel) tabAvailableService.getModel();
                model.setRowCount(0); 

                for(Service s: list_service){
                    model.addRow(new Object[]{
                        s.getMaDV(),
                        s.getTenDV()
                    });
                }

                tabAvailableService.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        int row = tabAvailableService.getSelectedRow();
                        if (row != -1) {
                            String service_id = tabAvailableService.getValueAt(row, 0).toString();
                            txtServiceID.setText(service_id.trim());
                        }
                    }
                });

            } catch (ClassNotFoundException | SQLException classNotFoundException) {

            }            
        }

    }
    private void SearchS()
    {
        ArrayList<Service> list_service = new ArrayList<>();
        String sql = "SELECT * FROM DVTIENICH WHERE trim(TENDVTI) = ?";
        dba_connection connect = new dba_connection();
        try {
            Class.forName(connect.driver);
            Connection con = DriverManager.getConnection(connect.url, connect.username, connect.password);
            PreparedStatement pst = con.prepareStatement(sql);            
            
            pst.setString(1, txtServiceName.getText().trim());
            
            ResultSet rs = pst.executeQuery();
            list_service.clear();
            
            while(rs.next()){
                Service s = new Service();
                s.setMaDV(rs.getString("MADVTI"));
                s.setTenDV(rs.getString("TENDVTI"));
                list_service.add(s);
            }
            
            model =  (DefaultTableModel) tabAvailableService.getModel();
            model.setRowCount(0); 
            
            for(Service s: list_service){
                model.addRow(new Object[]{
                    s.getMaDV(),
                    s.getTenDV()
                });
            }
            
            tabAvailableService.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    int row = tabAvailableService.getSelectedRow();
                    if (row != -1) {
                        String service_id = tabAvailableService.getValueAt(row, 0).toString();
                        txtServiceID.setText(service_id.trim());
                    }
                }
            });
            
        } catch (ClassNotFoundException | SQLException classNotFoundException) {
        }
    }
    private void btnSearchServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchServiceActionPerformed
        // TODO add your handling code here:
        if("Room".equals(txtServicetype.getText())){
            SearchR();
        }
        else if ("Service".equals(txtServicetype.getText())){
            SearchS();
        }
        
//        String sql = "SELECT "+LoaiDV+"."+MaLoai+", "+LoaiDV+"."+TenDV+" FROM "+LoaiDV+" "
//                + " JOIN CTHD ON CTHD.MADV = " + LoaiDV + "." + MaLoai +" ";
                //+ " WHERE ? = ?";
    }//GEN-LAST:event_btnSearchServiceActionPerformed

    private void txtServiceNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServiceNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServiceNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CTHD_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CTHD_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CTHD_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CTHD_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CTHD_Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearchService;
    private com.github.lgooddatepicker.components.DatePicker dpEnded;
    private com.github.lgooddatepicker.components.DatePicker dpStarted;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblServiceName;
    private javax.swing.JTable tabAvailableService;
    private javax.swing.JScrollPane tbl_dvphong;
    private javax.swing.JTextField txtInvoiceID;
    private javax.swing.JTextField txtServiceID;
    private javax.swing.JTextField txtServiceName;
    private javax.swing.JTextField txtServicetype;
    // End of variables declaration//GEN-END:variables
}
